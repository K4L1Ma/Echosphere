// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../api/v1/echosphere_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination=./internal/mocks/server.mock.go -package=mocks -source=../../../../api/v1/echosphere_grpc.pb.go EchoSphereTransmissionService_TransmitServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/k4l1ma/EchoSphere/api/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockEchoSphereTransmissionServiceClient is a mock of EchoSphereTransmissionServiceClient interface.
type MockEchoSphereTransmissionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEchoSphereTransmissionServiceClientMockRecorder
}

// MockEchoSphereTransmissionServiceClientMockRecorder is the mock recorder for MockEchoSphereTransmissionServiceClient.
type MockEchoSphereTransmissionServiceClientMockRecorder struct {
	mock *MockEchoSphereTransmissionServiceClient
}

// NewMockEchoSphereTransmissionServiceClient creates a new mock instance.
func NewMockEchoSphereTransmissionServiceClient(ctrl *gomock.Controller) *MockEchoSphereTransmissionServiceClient {
	mock := &MockEchoSphereTransmissionServiceClient{ctrl: ctrl}
	mock.recorder = &MockEchoSphereTransmissionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEchoSphereTransmissionServiceClient) EXPECT() *MockEchoSphereTransmissionServiceClientMockRecorder {
	return m.recorder
}

// Transmit mocks base method.
func (m *MockEchoSphereTransmissionServiceClient) Transmit(ctx context.Context, opts ...grpc.CallOption) (v1.EchoSphereTransmissionService_TransmitClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transmit", varargs...)
	ret0, _ := ret[0].(v1.EchoSphereTransmissionService_TransmitClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transmit indicates an expected call of Transmit.
func (mr *MockEchoSphereTransmissionServiceClientMockRecorder) Transmit(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transmit", reflect.TypeOf((*MockEchoSphereTransmissionServiceClient)(nil).Transmit), varargs...)
}

// MockEchoSphereTransmissionService_TransmitClient is a mock of EchoSphereTransmissionService_TransmitClient interface.
type MockEchoSphereTransmissionService_TransmitClient struct {
	ctrl     *gomock.Controller
	recorder *MockEchoSphereTransmissionService_TransmitClientMockRecorder
}

// MockEchoSphereTransmissionService_TransmitClientMockRecorder is the mock recorder for MockEchoSphereTransmissionService_TransmitClient.
type MockEchoSphereTransmissionService_TransmitClientMockRecorder struct {
	mock *MockEchoSphereTransmissionService_TransmitClient
}

// NewMockEchoSphereTransmissionService_TransmitClient creates a new mock instance.
func NewMockEchoSphereTransmissionService_TransmitClient(ctrl *gomock.Controller) *MockEchoSphereTransmissionService_TransmitClient {
	mock := &MockEchoSphereTransmissionService_TransmitClient{ctrl: ctrl}
	mock.recorder = &MockEchoSphereTransmissionService_TransmitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEchoSphereTransmissionService_TransmitClient) EXPECT() *MockEchoSphereTransmissionService_TransmitClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockEchoSphereTransmissionService_TransmitClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEchoSphereTransmissionService_TransmitClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitClient)(nil).Context))
}

// Header mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockEchoSphereTransmissionService_TransmitClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitClient) Recv() (*v1.EchoSphereTransmissionServiceTransmitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.EchoSphereTransmissionServiceTransmitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockEchoSphereTransmissionService_TransmitClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockEchoSphereTransmissionService_TransmitClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockEchoSphereTransmissionService_TransmitClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitClient) Send(arg0 *v1.EchoSphereTransmissionServiceTransmitRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEchoSphereTransmissionService_TransmitClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockEchoSphereTransmissionService_TransmitClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockEchoSphereTransmissionService_TransmitClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockEchoSphereTransmissionService_TransmitClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitClient)(nil).Trailer))
}

// MockEchoSphereTransmissionServiceServer is a mock of EchoSphereTransmissionServiceServer interface.
type MockEchoSphereTransmissionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEchoSphereTransmissionServiceServerMockRecorder
}

// MockEchoSphereTransmissionServiceServerMockRecorder is the mock recorder for MockEchoSphereTransmissionServiceServer.
type MockEchoSphereTransmissionServiceServerMockRecorder struct {
	mock *MockEchoSphereTransmissionServiceServer
}

// NewMockEchoSphereTransmissionServiceServer creates a new mock instance.
func NewMockEchoSphereTransmissionServiceServer(ctrl *gomock.Controller) *MockEchoSphereTransmissionServiceServer {
	mock := &MockEchoSphereTransmissionServiceServer{ctrl: ctrl}
	mock.recorder = &MockEchoSphereTransmissionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEchoSphereTransmissionServiceServer) EXPECT() *MockEchoSphereTransmissionServiceServerMockRecorder {
	return m.recorder
}

// Transmit mocks base method.
func (m *MockEchoSphereTransmissionServiceServer) Transmit(arg0 v1.EchoSphereTransmissionService_TransmitServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transmit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transmit indicates an expected call of Transmit.
func (mr *MockEchoSphereTransmissionServiceServerMockRecorder) Transmit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transmit", reflect.TypeOf((*MockEchoSphereTransmissionServiceServer)(nil).Transmit), arg0)
}

// MockUnsafeEchoSphereTransmissionServiceServer is a mock of UnsafeEchoSphereTransmissionServiceServer interface.
type MockUnsafeEchoSphereTransmissionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEchoSphereTransmissionServiceServerMockRecorder
}

// MockUnsafeEchoSphereTransmissionServiceServerMockRecorder is the mock recorder for MockUnsafeEchoSphereTransmissionServiceServer.
type MockUnsafeEchoSphereTransmissionServiceServerMockRecorder struct {
	mock *MockUnsafeEchoSphereTransmissionServiceServer
}

// NewMockUnsafeEchoSphereTransmissionServiceServer creates a new mock instance.
func NewMockUnsafeEchoSphereTransmissionServiceServer(ctrl *gomock.Controller) *MockUnsafeEchoSphereTransmissionServiceServer {
	mock := &MockUnsafeEchoSphereTransmissionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEchoSphereTransmissionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEchoSphereTransmissionServiceServer) EXPECT() *MockUnsafeEchoSphereTransmissionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEchoSphereTransmissionServiceServer mocks base method.
func (m *MockUnsafeEchoSphereTransmissionServiceServer) mustEmbedUnimplementedEchoSphereTransmissionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEchoSphereTransmissionServiceServer")
}

// mustEmbedUnimplementedEchoSphereTransmissionServiceServer indicates an expected call of mustEmbedUnimplementedEchoSphereTransmissionServiceServer.
func (mr *MockUnsafeEchoSphereTransmissionServiceServerMockRecorder) mustEmbedUnimplementedEchoSphereTransmissionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEchoSphereTransmissionServiceServer", reflect.TypeOf((*MockUnsafeEchoSphereTransmissionServiceServer)(nil).mustEmbedUnimplementedEchoSphereTransmissionServiceServer))
}

// MockEchoSphereTransmissionService_TransmitServer is a mock of EchoSphereTransmissionService_TransmitServer interface.
type MockEchoSphereTransmissionService_TransmitServer struct {
	ctrl     *gomock.Controller
	recorder *MockEchoSphereTransmissionService_TransmitServerMockRecorder
}

// MockEchoSphereTransmissionService_TransmitServerMockRecorder is the mock recorder for MockEchoSphereTransmissionService_TransmitServer.
type MockEchoSphereTransmissionService_TransmitServerMockRecorder struct {
	mock *MockEchoSphereTransmissionService_TransmitServer
}

// NewMockEchoSphereTransmissionService_TransmitServer creates a new mock instance.
func NewMockEchoSphereTransmissionService_TransmitServer(ctrl *gomock.Controller) *MockEchoSphereTransmissionService_TransmitServer {
	mock := &MockEchoSphereTransmissionService_TransmitServer{ctrl: ctrl}
	mock.recorder = &MockEchoSphereTransmissionService_TransmitServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEchoSphereTransmissionService_TransmitServer) EXPECT() *MockEchoSphereTransmissionService_TransmitServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEchoSphereTransmissionService_TransmitServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitServer) Recv() (*v1.EchoSphereTransmissionServiceTransmitRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.EchoSphereTransmissionServiceTransmitRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockEchoSphereTransmissionService_TransmitServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockEchoSphereTransmissionService_TransmitServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockEchoSphereTransmissionService_TransmitServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitServer) Send(arg0 *v1.EchoSphereTransmissionServiceTransmitResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEchoSphereTransmissionService_TransmitServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockEchoSphereTransmissionService_TransmitServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockEchoSphereTransmissionService_TransmitServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockEchoSphereTransmissionService_TransmitServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockEchoSphereTransmissionService_TransmitServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockEchoSphereTransmissionService_TransmitServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockEchoSphereTransmissionService_TransmitServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockEchoSphereTransmissionService_TransmitServer)(nil).SetTrailer), arg0)
}
