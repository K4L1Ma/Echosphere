// Code generated by MockGen. DO NOT EDIT.
// Source: server.go
//
// Generated by this command:
//
//	mockgen -destination=./internal/mocks/usecase.mock.go -package=mocks -source=server.go UseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	usecase "github.com/k4l1ma/EchoSphere/internal/EchoSphereServer/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// AckHandler mocks base method.
func (m *MockUseCase) AckHandler(ctx context.Context, cmd usecase.AckCMD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AckHandler", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// AckHandler indicates an expected call of AckHandler.
func (mr *MockUseCaseMockRecorder) AckHandler(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AckHandler", reflect.TypeOf((*MockUseCase)(nil).AckHandler), ctx, cmd)
}

// RegisterHandler mocks base method.
func (m *MockUseCase) RegisterHandler(ctx context.Context, cmd usecase.RegisterCMD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHandler", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockUseCaseMockRecorder) RegisterHandler(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockUseCase)(nil).RegisterHandler), ctx, cmd)
}

// RelayHandler mocks base method.
func (m *MockUseCase) RelayHandler(ctx context.Context, cmd usecase.RelayCMD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelayHandler", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelayHandler indicates an expected call of RelayHandler.
func (mr *MockUseCaseMockRecorder) RelayHandler(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelayHandler", reflect.TypeOf((*MockUseCase)(nil).RelayHandler), ctx, cmd)
}

// UnregisterHandler mocks base method.
func (m *MockUseCase) UnregisterHandler(ctx context.Context, cmd usecase.UnregisterCMD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterHandler", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterHandler indicates an expected call of UnregisterHandler.
func (mr *MockUseCaseMockRecorder) UnregisterHandler(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterHandler", reflect.TypeOf((*MockUseCase)(nil).UnregisterHandler), ctx, cmd)
}
