// Code generated by MockGen. DO NOT EDIT.
// Source: ../core/router.go
//
// Generated by this command:
//
//	mockgen -destination=./internal/mocks/multiplexer.mock.go -package=mocks -source=../core/router.go RelayRouter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	core "github.com/k4l1ma/EchoSphere/internal/EchoSphereServer/core"
	gomock "go.uber.org/mock/gomock"
)

// MockMessager is a mock of Messager interface.
type MockMessager struct {
	ctrl     *gomock.Controller
	recorder *MockMessagerMockRecorder
}

// MockMessagerMockRecorder is the mock recorder for MockMessager.
type MockMessagerMockRecorder struct {
	mock *MockMessager
}

// NewMockMessager creates a new mock instance.
func NewMockMessager(ctrl *gomock.Controller) *MockMessager {
	mock := &MockMessager{ctrl: ctrl}
	mock.recorder = &MockMessagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessager) EXPECT() *MockMessagerMockRecorder {
	return m.recorder
}

// SendMsg mocks base method.
func (m_2 *MockMessager) SendMsg(ctx context.Context, m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMessagerMockRecorder) SendMsg(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMessager)(nil).SendMsg), ctx, m)
}

// MockRelayRouter is a mock of RelayRouter interface.
type MockRelayRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRelayRouterMockRecorder
}

// MockRelayRouterMockRecorder is the mock recorder for MockRelayRouter.
type MockRelayRouterMockRecorder struct {
	mock *MockRelayRouter
}

// NewMockRelayRouter creates a new mock instance.
func NewMockRelayRouter(ctrl *gomock.Controller) *MockRelayRouter {
	mock := &MockRelayRouter{ctrl: ctrl}
	mock.recorder = &MockRelayRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayRouter) EXPECT() *MockRelayRouterMockRecorder {
	return m.recorder
}

// AcquireRandomRelayer mocks base method.
func (m *MockRelayRouter) AcquireRandomRelayer(ctx context.Context, excludeRelayer string) (string, core.Messager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireRandomRelayer", ctx, excludeRelayer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(core.Messager)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AcquireRandomRelayer indicates an expected call of AcquireRandomRelayer.
func (mr *MockRelayRouterMockRecorder) AcquireRandomRelayer(ctx, excludeRelayer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireRandomRelayer", reflect.TypeOf((*MockRelayRouter)(nil).AcquireRandomRelayer), ctx, excludeRelayer)
}

// AcquireRelayer mocks base method.
func (m *MockRelayRouter) AcquireRelayer(ctx context.Context, ownerID string) (core.Messager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireRelayer", ctx, ownerID)
	ret0, _ := ret[0].(core.Messager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireRelayer indicates an expected call of AcquireRelayer.
func (mr *MockRelayRouterMockRecorder) AcquireRelayer(ctx, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireRelayer", reflect.TypeOf((*MockRelayRouter)(nil).AcquireRelayer), ctx, ownerID)
}

// Register mocks base method.
func (m *MockRelayRouter) Register(ctx context.Context, ownerID string, relayer core.Messager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", ctx, ownerID, relayer)
}

// Register indicates an expected call of Register.
func (mr *MockRelayRouterMockRecorder) Register(ctx, ownerID, relayer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRelayRouter)(nil).Register), ctx, ownerID, relayer)
}

// ReleaseRelayer mocks base method.
func (m *MockRelayRouter) ReleaseRelayer(ctx context.Context, ownerID string, relayer core.Messager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseRelayer", ctx, ownerID, relayer)
}

// ReleaseRelayer indicates an expected call of ReleaseRelayer.
func (mr *MockRelayRouterMockRecorder) ReleaseRelayer(ctx, ownerID, relayer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseRelayer", reflect.TypeOf((*MockRelayRouter)(nil).ReleaseRelayer), ctx, ownerID, relayer)
}
