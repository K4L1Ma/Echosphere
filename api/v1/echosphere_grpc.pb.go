// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/echosphere.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EchoSphereTransmissionService_Transmit_FullMethodName = "/api.v1.EchoSphereTransmissionService/Transmit"
)

// EchoSphereTransmissionServiceClient is the client API for EchoSphereTransmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoSphereTransmissionServiceClient interface {
	Transmit(ctx context.Context, opts ...grpc.CallOption) (EchoSphereTransmissionService_TransmitClient, error)
}

type echoSphereTransmissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoSphereTransmissionServiceClient(cc grpc.ClientConnInterface) EchoSphereTransmissionServiceClient {
	return &echoSphereTransmissionServiceClient{cc}
}

func (c *echoSphereTransmissionServiceClient) Transmit(ctx context.Context, opts ...grpc.CallOption) (EchoSphereTransmissionService_TransmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoSphereTransmissionService_ServiceDesc.Streams[0], EchoSphereTransmissionService_Transmit_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoSphereTransmissionServiceTransmitClient{stream}
	return x, nil
}

type EchoSphereTransmissionService_TransmitClient interface {
	Send(*EchoSphereTransmissionServiceTransmitRequest) error
	Recv() (*EchoSphereTransmissionServiceTransmitResponse, error)
	grpc.ClientStream
}

type echoSphereTransmissionServiceTransmitClient struct {
	grpc.ClientStream
}

func (x *echoSphereTransmissionServiceTransmitClient) Send(m *EchoSphereTransmissionServiceTransmitRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoSphereTransmissionServiceTransmitClient) Recv() (*EchoSphereTransmissionServiceTransmitResponse, error) {
	m := new(EchoSphereTransmissionServiceTransmitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoSphereTransmissionServiceServer is the server API for EchoSphereTransmissionService service.
// All implementations should embed UnimplementedEchoSphereTransmissionServiceServer
// for forward compatibility
type EchoSphereTransmissionServiceServer interface {
	Transmit(EchoSphereTransmissionService_TransmitServer) error
}

// UnimplementedEchoSphereTransmissionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEchoSphereTransmissionServiceServer struct {
}

func (UnimplementedEchoSphereTransmissionServiceServer) Transmit(EchoSphereTransmissionService_TransmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}

// UnsafeEchoSphereTransmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoSphereTransmissionServiceServer will
// result in compilation errors.
type UnsafeEchoSphereTransmissionServiceServer interface {
	mustEmbedUnimplementedEchoSphereTransmissionServiceServer()
}

func RegisterEchoSphereTransmissionServiceServer(s grpc.ServiceRegistrar, srv EchoSphereTransmissionServiceServer) {
	s.RegisterService(&EchoSphereTransmissionService_ServiceDesc, srv)
}

func _EchoSphereTransmissionService_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoSphereTransmissionServiceServer).Transmit(&echoSphereTransmissionServiceTransmitServer{stream})
}

type EchoSphereTransmissionService_TransmitServer interface {
	Send(*EchoSphereTransmissionServiceTransmitResponse) error
	Recv() (*EchoSphereTransmissionServiceTransmitRequest, error)
	grpc.ServerStream
}

type echoSphereTransmissionServiceTransmitServer struct {
	grpc.ServerStream
}

func (x *echoSphereTransmissionServiceTransmitServer) Send(m *EchoSphereTransmissionServiceTransmitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoSphereTransmissionServiceTransmitServer) Recv() (*EchoSphereTransmissionServiceTransmitRequest, error) {
	m := new(EchoSphereTransmissionServiceTransmitRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoSphereTransmissionService_ServiceDesc is the grpc.ServiceDesc for EchoSphereTransmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoSphereTransmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.EchoSphereTransmissionService",
	HandlerType: (*EchoSphereTransmissionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transmit",
			Handler:       _EchoSphereTransmissionService_Transmit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/echosphere.proto",
}
