// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: api/v1/echosphere.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_echosphere_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_echosphere_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_api_v1_echosphere_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To      string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_echosphere_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_echosphere_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_api_v1_echosphere_proto_rawDescGZIP(), []int{1}
}

func (x *Ack) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Ack) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Ack) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type EchoSphereTransmissionServiceTransmitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IncomingData:
	//
	//	*EchoSphereTransmissionServiceTransmitRequest_Message
	//	*EchoSphereTransmissionServiceTransmitRequest_Ack
	IncomingData isEchoSphereTransmissionServiceTransmitRequest_IncomingData `protobuf_oneof:"incoming_data"`
}

func (x *EchoSphereTransmissionServiceTransmitRequest) Reset() {
	*x = EchoSphereTransmissionServiceTransmitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_echosphere_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoSphereTransmissionServiceTransmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoSphereTransmissionServiceTransmitRequest) ProtoMessage() {}

func (x *EchoSphereTransmissionServiceTransmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_echosphere_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoSphereTransmissionServiceTransmitRequest.ProtoReflect.Descriptor instead.
func (*EchoSphereTransmissionServiceTransmitRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_echosphere_proto_rawDescGZIP(), []int{2}
}

func (m *EchoSphereTransmissionServiceTransmitRequest) GetIncomingData() isEchoSphereTransmissionServiceTransmitRequest_IncomingData {
	if m != nil {
		return m.IncomingData
	}
	return nil
}

func (x *EchoSphereTransmissionServiceTransmitRequest) GetMessage() *Message {
	if x, ok := x.GetIncomingData().(*EchoSphereTransmissionServiceTransmitRequest_Message); ok {
		return x.Message
	}
	return nil
}

func (x *EchoSphereTransmissionServiceTransmitRequest) GetAck() *Ack {
	if x, ok := x.GetIncomingData().(*EchoSphereTransmissionServiceTransmitRequest_Ack); ok {
		return x.Ack
	}
	return nil
}

type isEchoSphereTransmissionServiceTransmitRequest_IncomingData interface {
	isEchoSphereTransmissionServiceTransmitRequest_IncomingData()
}

type EchoSphereTransmissionServiceTransmitRequest_Message struct {
	Message *Message `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type EchoSphereTransmissionServiceTransmitRequest_Ack struct {
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*EchoSphereTransmissionServiceTransmitRequest_Message) isEchoSphereTransmissionServiceTransmitRequest_IncomingData() {
}

func (*EchoSphereTransmissionServiceTransmitRequest_Ack) isEchoSphereTransmissionServiceTransmitRequest_IncomingData() {
}

type EchoSphereTransmissionServiceTransmitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OutgoingData:
	//
	//	*EchoSphereTransmissionServiceTransmitResponse_Message
	//	*EchoSphereTransmissionServiceTransmitResponse_Ack
	OutgoingData isEchoSphereTransmissionServiceTransmitResponse_OutgoingData `protobuf_oneof:"outgoing_data"`
}

func (x *EchoSphereTransmissionServiceTransmitResponse) Reset() {
	*x = EchoSphereTransmissionServiceTransmitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_echosphere_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoSphereTransmissionServiceTransmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoSphereTransmissionServiceTransmitResponse) ProtoMessage() {}

func (x *EchoSphereTransmissionServiceTransmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_echosphere_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoSphereTransmissionServiceTransmitResponse.ProtoReflect.Descriptor instead.
func (*EchoSphereTransmissionServiceTransmitResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_echosphere_proto_rawDescGZIP(), []int{3}
}

func (m *EchoSphereTransmissionServiceTransmitResponse) GetOutgoingData() isEchoSphereTransmissionServiceTransmitResponse_OutgoingData {
	if m != nil {
		return m.OutgoingData
	}
	return nil
}

func (x *EchoSphereTransmissionServiceTransmitResponse) GetMessage() *Message {
	if x, ok := x.GetOutgoingData().(*EchoSphereTransmissionServiceTransmitResponse_Message); ok {
		return x.Message
	}
	return nil
}

func (x *EchoSphereTransmissionServiceTransmitResponse) GetAck() *Ack {
	if x, ok := x.GetOutgoingData().(*EchoSphereTransmissionServiceTransmitResponse_Ack); ok {
		return x.Ack
	}
	return nil
}

type isEchoSphereTransmissionServiceTransmitResponse_OutgoingData interface {
	isEchoSphereTransmissionServiceTransmitResponse_OutgoingData()
}

type EchoSphereTransmissionServiceTransmitResponse_Message struct {
	Message *Message `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type EchoSphereTransmissionServiceTransmitResponse_Ack struct {
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*EchoSphereTransmissionServiceTransmitResponse_Message) isEchoSphereTransmissionServiceTransmitResponse_OutgoingData() {
}

func (*EchoSphereTransmissionServiceTransmitResponse_Ack) isEchoSphereTransmissionServiceTransmitResponse_OutgoingData() {
}

var File_api_v1_echosphere_proto protoreflect.FileDescriptor

var file_api_v1_echosphere_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x73, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x22, 0x37, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x03, 0x41, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0x8d, 0x01, 0x0a, 0x2c, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x0f,
	0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x8e, 0x01, 0x0a, 0x2d, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42,
	0x0f, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x9c, 0x01, 0x0a, 0x1d, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x7b, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x34,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63,
	0x68, 0x6f, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x08, 0x5a, 0x06, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_v1_echosphere_proto_rawDescOnce sync.Once
	file_api_v1_echosphere_proto_rawDescData = file_api_v1_echosphere_proto_rawDesc
)

func file_api_v1_echosphere_proto_rawDescGZIP() []byte {
	file_api_v1_echosphere_proto_rawDescOnce.Do(func() {
		file_api_v1_echosphere_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_echosphere_proto_rawDescData)
	})
	return file_api_v1_echosphere_proto_rawDescData
}

var file_api_v1_echosphere_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_v1_echosphere_proto_goTypes = []interface{}{
	(*Message)(nil), // 0: api.v1.Message
	(*Ack)(nil),     // 1: api.v1.Ack
	(*EchoSphereTransmissionServiceTransmitRequest)(nil),  // 2: api.v1.EchoSphereTransmissionServiceTransmitRequest
	(*EchoSphereTransmissionServiceTransmitResponse)(nil), // 3: api.v1.EchoSphereTransmissionServiceTransmitResponse
}
var file_api_v1_echosphere_proto_depIdxs = []int32{
	0, // 0: api.v1.EchoSphereTransmissionServiceTransmitRequest.message:type_name -> api.v1.Message
	1, // 1: api.v1.EchoSphereTransmissionServiceTransmitRequest.ack:type_name -> api.v1.Ack
	0, // 2: api.v1.EchoSphereTransmissionServiceTransmitResponse.message:type_name -> api.v1.Message
	1, // 3: api.v1.EchoSphereTransmissionServiceTransmitResponse.ack:type_name -> api.v1.Ack
	2, // 4: api.v1.EchoSphereTransmissionService.Transmit:input_type -> api.v1.EchoSphereTransmissionServiceTransmitRequest
	3, // 5: api.v1.EchoSphereTransmissionService.Transmit:output_type -> api.v1.EchoSphereTransmissionServiceTransmitResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_api_v1_echosphere_proto_init() }
func file_api_v1_echosphere_proto_init() {
	if File_api_v1_echosphere_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_echosphere_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_echosphere_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_echosphere_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoSphereTransmissionServiceTransmitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_echosphere_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoSphereTransmissionServiceTransmitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_echosphere_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*EchoSphereTransmissionServiceTransmitRequest_Message)(nil),
		(*EchoSphereTransmissionServiceTransmitRequest_Ack)(nil),
	}
	file_api_v1_echosphere_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*EchoSphereTransmissionServiceTransmitResponse_Message)(nil),
		(*EchoSphereTransmissionServiceTransmitResponse_Ack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_echosphere_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_echosphere_proto_goTypes,
		DependencyIndexes: file_api_v1_echosphere_proto_depIdxs,
		MessageInfos:      file_api_v1_echosphere_proto_msgTypes,
	}.Build()
	File_api_v1_echosphere_proto = out.File
	file_api_v1_echosphere_proto_rawDesc = nil
	file_api_v1_echosphere_proto_goTypes = nil
	file_api_v1_echosphere_proto_depIdxs = nil
}
